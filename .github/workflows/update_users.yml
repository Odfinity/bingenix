name: Update Users JSON

on:
  schedule:
    # Runs every 8 hours
    - cron: '0 */8 * * *'
    # Runs daily at 12:44:28 IST (07:14:28 UTC, since IST is UTC+5:30)
    - cron: '28 14 7 * *'
  workflow_dispatch:  # Allows manual triggering

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytz

    - name: Update JSON file
      run: |
        import json
        import random
        import string
        from datetime import datetime, timedelta
        import pytz

        # Load the JSON file
        with open('users.json', 'r') as file:
            data = json.load(file)

        # Get current time in IST
        ist = pytz.timezone('Asia/Kolkata')
        current_time = datetime.now(ist)
        current_date_str = current_time.strftime('%d-%m-%Y')
        current_time_str = current_time.strftime('%I:%M:%S %p')

        # Function to generate a random user ID
        def generate_user_id():
            return ''.join(random.choice(string.ascii_lowercase) for _ in range(8))

        # Function to generate a random password
        def generate_password():
            chars = string.ascii_letters + string.digits
            return ''.join(random.choice(chars) for _ in range(8))

        # Update expired users
        for user in data['data']:
            expiry_date = datetime.strptime(user['date'], '%d-%m-%Y')
            if expiry_date < current_time:
                user['user'] = generate_user_id()
                user['password'] = generate_password()
                new_expiry_date = current_time + timedelta(days=15)
                user['date'] = new_expiry_date.strftime('%d-%m-%Y')
                user['time'] = current_time_str

        # Update the last update time
        data['last update time'] = f"{current_time_str} {current_date_str}"

        # Save the updated JSON file
        with open('users.json', 'w') as file:
            json.dump(data, file, indent=4)

      shell: python

    - name: Commit and push changes
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add users.json
        git commit -m "Automated update of users.json"
        git push
